---
layout: post	
title: "Git, 실무에선 어떻게 쓰일까"
date: 2021-04-15
categories:
  - Questions
description:
image: https://res.cloudinary.com/danhdvla9/image/upload/v1620092153/Thumbnails/1200px-Git-logo.svg_aa0ny9.png
image-sm: https://res.cloudinary.com/danhdvla9/image/upload/v1620092153/Thumbnails/1200px-Git-logo.svg_aa0ny9.png
image-me: https://res.cloudinary.com/danhdvla9/image/upload/v1614694302/Blacksmith_vqd5bz.png
---

<br>
<br>

## Git, 실무에선 어떻게 쓰일까

<br>
<br>

 요새 스터디를 하며 git을 코드 리뷰용 툴로 이용하고 있다. (그전엔 그냥 원격 저장소 같은 느낌으로...)
스터디 전에 이용하던 것과 차이는 여러 사람들과 한 레포지토리를 공유하며 쓰고 있는 점인데 이 과정에서 그동안 애매하게
알고있던 브랜치와 PR (Pull Request)를 사용하며 진정한 git에 대해 알아가는 중이다. 이 두가지에 대한 의문이 풀리기
시작하면서 오픈 소스 기여에 대한 로망도 점점 가까워지는 것 같다.  

 
 그렇게 git을 쓰며 알아가던 중, 실무에서는 어떨지 궁금증이 생겨났다. 
 
 - PR 후, 새로 바뀐 코드에 대해 모든 것을 체크할까? 테스트코드는?
 - 충돌이 일어났다면 어떻게 대처할까? 
 - FE와 BE는 동시에 개발할까, 순서를 두고 개발할까?

<br>
<br>

#### PR 후, 모든 코드를 체크할까?

<br>
<br>

 정답은 YES다. 그렇기 때문에 더욱 commit 주기가 중요하다고 한다. 대부분 기능 별로 나눠서 commit을 하고 
서비스 단위로 묶어서 통합테스트를 진행한다고 한다(단위 테스트는 기능 commit 전 실행). 그렇다면 테스트코드들은?
다 같이 묶여서 배포되는건가?? 라고 순간 생각했는데 패키징 할 때 테스트코드는 포함되지 않는다는 것을 깜빡했다.
이러한 과정을 상상하던 중, 실무에서는 PR을 보고 merge를 결정하는 과정이 어떻게 흘러가고 누구의 결정에 따르는지 궁금해졌다.
아마 개발팀장을 맡고 있는 사람일 것이라 얼핏 생각이 듦과 동시에 PR 산에 갇힌 모습이 상상되어 조금 숙연해졌다. 개발팀에 들어
가게 되면 다른 팀원들도 생각하는 팀원이 되자.

<br>
<br>

#### 충돌이 일어났다면 어떻게 대처할까?

<br>
<br>

 물론 그런 일은 없어야 마땅하지만, 만약 여러 사람이 하나의 파일을 불가피하게 수정한 경우에는 충돌이 일어나게 된다.
예를들어 A라는 파일을 세 사람이 각각 A$ , A; , A^ 로 수정한 경우는 충돌이 일어나도 A$;^로 전부 합치면 그만이지만, 
만약 A!라는 파일을 세 사람이 A , A! , A% 같이 빼고 더하고가 난무한 경우에는 어떻게 충돌을 처리할까? 
너무 극단적인 경우라서 아마 자주 안일어날 것 같긴하지만... 예상으로는 이런 경우가 일어난다면 급하게 팀 회의가 열리지 않을까...?
때에 따라서 A라는 파일이 크게 종속적인 파일 (ex. pom.xml)일 경우에는 세 사람 중 한 두명은 짰던 코드를 전부 갈아 엎어야 할 텐데
생각만해도 너무 끔찍하다. 프로그래머로써 커뮤니케이션이 얼마나 중요한지 생각하게되는 질문거리 였다.

<br>
<br>

#### FE와 BE는 동시에 개발할까, 순서를 두고 개발할까?

<br>
<br>

 이 부분이 궁금했던 이유는, 보통 하나의 프로젝트를 FE와 BE로 나눠서 개발한다고 가정하였을 때, 동시에 개발 할 경우
사전에 기획된 대로 개발 할 뿐, 이미 있는 FE 폼이나 BE 폼을 참고하며 개발할 순 없게된다. 아마 기준을 두고 여러번 
회고를 진행하겠지만, 회고에서 두 파트가 어긋나는 경우가 많으면 굉장히 비효율적이게 된다. 그렇다고 FE나 BE를 먼저
개발하고 그 후 다른 파트를 개발하게 된다면, FE가 개발할 땐 BE가 상대적으로 업무량이 적고 그 반대의 경우도 마찬가지가
된다. 이에 대해서 실무에서는 FE와 BE의 개발이 어떤 흐름으로 흘러갈 지 관심을 가지게 되었다. 


<br>
<br>

### 오늘 질문의 종착점 

<br>
<br>

 - 자문을 구하자  
 여기저기 물어보면 답은 나오겠지만... 듣고 궁금증이 해결되었다고 해서 시원스럽진 않을 것 같다. 경험이 중요하니깐.
 
 - 취업을 하자  
 제일 확실한 해결책이지만 내 마음대로 되는 것은 아니니까 (주륵)
 
 - 오픈소스 기여에 참가하자  
 아무래도 실무자들도 많이 기여를 하기 때문에 git을 통해 branch와 PR을 이용하는 과정은 비슷하게 갈 것이라 예상된다.
 취업이 내 마음대로 안된다는 점을 생각하면 현실적으로 제일 가능한 선택지인데, 참여하기 위한 허들이 얼마나 높을지가 
 관건이다.
